{"version":3,"sources":["features/trivia/triviaConstants.js","features/trivia/TriviaComponent.js","features/trivia/triviaSelector.js","features/trivia/TriviaContainer.js","features/trivia/triviaActions.js","features/trivia/triviaActionTypes.js","App.js","serviceWorker.js","features/trivia/triviaInitialState.js","features/trivia/triviaReducer.js","features/trivia/triviaSaga.js","store.js","index.js"],"names":["triviaViews","Quiz","props","triviaList","currentTriviaIndex","setSelectedAnswer","selectedOptions","gotoNextQuestion","gotoPreviousQuestion","setTotalScore","currentTrivia","length","className","Minutes","Seconds","question","options","map","item","index","key","onClick","value","disabled","Loader","QuizResult","v-if","totalScore","TriviaComponent","triviaView","loader","quiz","result","getTriviaListWithOptions","createSelector","state","trivia","triviaItem","trivaItem","array","i","j","Math","floor","random","shuffle","correct_answer","incorrect_answers","TriviaContainer","this","getData","console","log","Component","connect","dispatch","type","option","payload","Object","prototype","hasOwnProperty","call","getTotalScore","updateTriviaView","App","Boolean","window","location","hostname","match","TriviaInitialState","isLoading","countFrom","Date","totalSeconds","triviaReducer","triviaInitialState","action","assign","concat","results","watcherSaga","workerSaga","takeEvery","updateViewPayload","getTriviaData","all","put","fetch","then","response","json","storeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","triviaSaga","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8RAAA,IAAMA,EACI,gBADJA,EAEE,cAFFA,EAGI,gB,iBC0BV,SAASC,EAAT,GAA0B,IAAVC,EAAS,EAATA,MAEZC,EAOED,EAPFC,WACAC,EAMEF,EANFE,mBACAC,EAKEH,EALFG,kBACAC,EAIEJ,EAJFI,gBACAC,EAGEL,EAHFK,iBACAC,EAEEN,EAFFM,qBACAC,EACEP,EADFO,cAGIC,EAAgBP,EAAWQ,QAAUR,EAAWC,GAEtD,OACE,yBAAKQ,UAAU,aACb,wBAAIA,UAAU,+BAAd,SAAmDR,EAAqB,EAAxE,KAA6ED,EAAWQ,QACxF,wBAAIC,UAAU,mCACZ,kBAAC,IAAD,KACE,kBAAC,IAAMC,QAAP,MADF,IAEC,kBAAC,IAAMC,QAAP,QAIH,yBAAKF,UAAU,2BACb,wBAAIA,UAAU,qDAAqDF,EAAcK,UACjF,yBAAKH,UAAU,yCACZF,EAAcM,QAAQC,KAAI,SAACC,EAAMC,GAChC,OACE,yBAAKC,IAAKD,EAAOP,UAAU,iBAAiBS,QAAS,kBAAMhB,EAAkB,CAACe,IAAKhB,EAAoBkB,MAAOJ,MAC5G,yBAAKN,UAAW,gBAAkBN,EAAgBF,KAAwBc,EAAO,SAAW,KAC5F,8BAAOA,UAQjB,6BACE,yBAAKN,UAAU,WACb,yBAAKA,UAAU,yBACb,4BAAQA,UAAU,sBAAsBW,SAAiC,IAAvBnB,EAA0BiB,QAASb,GAArF,YACA,4BAAQI,UAAU,wBAAwBW,SAAUnB,IAAwBD,EAAWQ,OAAS,EAAIU,QAASd,GAA7G,QACA,4BAAQK,UAAU,wBAAwBS,QAAS,kBAAMZ,EAAcH,EAAiBH,KAAxF,YAGJ,wBAAIS,UAAU,+BAAd,gDAMR,SAASY,IACP,OACE,yBAAKZ,UAAU,qBAAf,cAIJ,SAASa,EAAWvB,GAClB,OACE,yBAAKU,UAAU,SAASc,OAAK,4BAC3B,wBAAId,UAAU,+BAAd,4DACA,wBAAIA,UAAU,+BAAd,gBAA0DV,EAAMyB,WAAhE,MAmBSC,MAvGf,SAAyB1B,GAAQ,IAE7B2B,EAEE3B,EAFF2B,WACAF,EACEzB,EADFyB,WAIAG,EAGE9B,EAFF+B,EAEE/B,EADFgC,EACEhC,EAEJ,OACE,yBAAKY,UAAU,aACZiB,IAAeC,GAAU,kBAACN,EAAD,MACzBK,IAAeE,GAAQ,kBAAC9B,EAAD,CAAMC,MAAOA,IACpC2B,IAAeG,GAAU,kBAACP,EAAD,CAAYE,WAAYA,M,uBCNxD,IAEMM,EAA2BC,aAFX,SAAAC,GAAK,OAAIA,EAAMC,OAAOjC,cAI1C,SAACA,GAOC,OAN8BA,EAAWc,KAAI,SAACoB,GAC5C,IArBoBC,EAqBdtB,EAlBV,WACE,IAD4B,IAAbuB,EAAY,uDAAJ,GACdC,EAAID,EAAM5B,OAAS,EAAG6B,EAAI,EAAGA,IAAK,CACzC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADC,EAElB,CAACD,EAAME,GAAIF,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAME,GAFwB,KAK3C,OAAOF,EAGFM,EAZiBP,EAqBaD,IApBN,CAAKC,EAAUQ,gBAAf,mBAAkCR,EAAUS,qBAsBvE,OAAO,eAAIV,EAAX,CAAuBrB,kBCRvBgC,E,4LAEFC,KAAK/C,MAAMgD,Y,+BAIX,OAAO,kBAAC,EAAoBD,KAAK/C,S,uCAIjCiD,QAAQC,IAAI,iC,GAVcC,aA8DfC,eAhCS,SAAAnB,GAAU,IACxBC,EAAWD,EAAXC,OAENP,EAIEO,EAJFP,WACAzB,EAGEgC,EAHFhC,mBACAE,EAEE8B,EAFF9B,gBACAqB,EACES,EADFT,WAGF,MAAO,CACLxB,WAAY8B,EAAyBE,GACrC/B,qBACAyB,aACAvB,kBACAqB,iBAIuB,SAAA4B,GAAQ,MAAK,CACtCL,QAAS,kBAAMK,ECvDR,CAACC,KCX2B,2BFmEnCnD,kBAAmB,SAAAoD,GACjBF,EClDJ,WAA0C,IAAfG,EAAc,uDAAJ,GACnC,MAAO,CAACF,KCbyB,sBDaEE,WDiDxBrD,CAAkBoD,KAE7BlD,iBAAkB,kBAAMgD,EC/CjB,CAACC,KCfmC,mCF+D3ChD,qBAAsB,kBAAM+C,EC5CrB,CAACC,KClBmC,mCF+D3C/C,cAAe,SAACH,EAAiBH,GAC/B,IAAMwB,EA1CY,SAASrB,EAAiBH,GAC9C,IAAIwB,EAAa,EAGjB,IAAK,IAAMP,KAAOd,EAAiB,CACjC,GAAIqD,OAAOC,UAAUC,eAAeC,KAAKxD,EAAiBc,GACjCd,EAAgBc,KACjBjB,EAAWiB,GAAK0B,iBACpCnB,GANkB,GAWxB,OAAOA,EA6BcoC,CAAczD,EAAiBH,GAClDoD,EC3CK,CAACC,KCpBqB,kBDoBEE,QD2CN,CAAC/B,gBACxB4B,EC7DJ,SAA0BG,GACxB,MAAO,CAACF,KCXwB,qBDWEE,WD4DvBM,CAAiB,CAACnC,WAAY7B,SAI5BsD,CAGbN,GG3DaiB,MAhBf,WACE,OACE,yBAAKrD,UAAU,mBACb,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,qCACb,yBAAKA,UAAU,kCACb,kBAAC,EAAD,YCFMsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BCFSC,EAdY,CACzBnC,OAAQ,CACNjC,WAAY,GACZqE,WAAW,EACXpE,mBAAoB,EACpBM,cAAe,GACfJ,gBAAiB,GACjBqB,WAAY,EACZE,WAAY7B,EACZyE,UAAW,IAAIC,KACfC,aAAc,ICwDHC,MAzDf,WAA4D,IAArCzC,EAAoC,uDAA5B0C,EAAoBC,EAAQ,uCACzD,OAAQA,EAAOtB,MACb,IJZ8B,qBIa5B,OAAOG,OAAOoB,OAAO,GAAI5C,EAAO,CAC9BC,OAAO,eACFD,EAAMC,OADL,CAEJjC,WAAYgC,EAAMC,OAAOjC,WAAW6E,OAAOF,EAAOpB,QAAQuB,aAIhE,IJjB8B,qBIkB5B,OAAOtB,OAAOoB,OAAO,GAAI5C,EAAO,CAC9BC,OAAO,eACFD,EAAMC,OADL,CAEJP,WAAYiD,EAAOpB,QAAQ7B,eAIjC,IJvB+B,sBIwB7B,OAAO8B,OAAOoB,OAAO,GAAI5C,EAAO,CAC9BC,OAAO,eACFD,EAAMC,OADL,CAEJ9B,gBAAiBqD,OAAOoB,OAAO,GAAI5C,EAAMC,OAAO9B,gBAA/BqD,OAAA,IAAAA,CAAA,GACdmB,EAAOpB,QAAQtC,IAAM0D,EAAOpB,QAAQpC,YAK7C,IJ/ByC,gCIgCvC,OAAOqC,OAAOoB,OAAO,GAAI5C,EAAO,CAC9BC,OAAO,eACFD,EAAMC,OADL,CAEJhC,mBAAoB+B,EAAMC,OAAOhC,mBAAqB,MAI5D,IJtCyC,gCIuCvC,OAAOuD,OAAOoB,OAAO,GAAI5C,EAAO,CAC9BC,OAAO,eACFD,EAAMC,OADL,CAEJhC,mBAAoB+B,EAAMC,OAAOhC,mBAAqB,MAI5D,IJ5C2B,kBI6CzB,OAAOuD,OAAOoB,OAAO,GAAI5C,EAAO,CAC9BC,OAAO,eACFD,EAAMC,OADL,CAEJT,WAAYmD,EAAOpB,QAAQ/B,eAIjC,QACE,OAAOQ,I,kCCrDY+C,G,WAIfC,GAJK,SAAUD,IAAV,iEACb,OADa,SACPE,YLZ6B,wBKYID,GAD1B,uCAIf,SAAUA,IAAV,yEAMoB,OANpB,SAEUE,EAAoB,CACxBxD,WAAY7B,GAHlB,SAM0B8D,YAAKwB,GAN/B,OAQI,OAFM5B,EANV,gBAQU6B,YAAI,CACRC,YAAI,CAAChC,KLvBuB,qBKuBGE,YAC/B8B,YAAI,CAAChC,KLrBuB,qBKqBGE,QAAS2B,MAV9C,8BAcI,OAdJ,mCAcUG,YAAI,CAAChC,KL3BiB,mBK2BOE,QAAQ,EAAD,KAd9C,qDAmBA,SAAS4B,IAGP,OAAOG,MAFK,kFAGTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UChC/B,IAAMC,EAAiB1B,OAAO2B,sCAAwCC,IAEhEC,EAAiBC,cAEjBC,EAAQC,YACZvB,EACAiB,EAAeO,YAAgBJ,KAGjCA,EAAeK,IAAIC,GAEJJ,QCPfK,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,eAAe,SLqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.c3a08a81.chunk.js","sourcesContent":["const triviaViews = {\n  loader: 'TRIVIA_LOADER',\n  quiz: 'TRIVIA_QUIZ',\n  result: 'TRIVIA_RESULT'\n}\n\nexport { triviaViews };","import React from 'react';\nimport { triviaViews } from './triviaConstants';\n\nimport { PropTypes } from 'prop-types';\n\nimport Timer from 'react-compound-timer'\n\nfunction TriviaComponent(props) {\n  const {\n    triviaView,\n    totalScore\n  } = props;\n\n  const {\n    loader,\n    quiz,\n    result\n  } = triviaViews;\n\n  return (\n    <div className=\"flex-item\">\n      {triviaView === loader && <Loader />}\n      {triviaView === quiz && <Quiz props={props} />}\n      {triviaView === result && <QuizResult totalScore={totalScore} />}\n    </div>\n\n  )\n}\n\nfunction Quiz({ props }) {\n  const {\n    triviaList,\n    currentTriviaIndex,\n    setSelectedAnswer,\n    selectedOptions,\n    gotoNextQuestion,\n    gotoPreviousQuestion,\n    setTotalScore\n  } = props;\n\n  const currentTrivia = triviaList.length && triviaList[currentTriviaIndex]\n\n  return (\n    <div className=\"flex-item\">\n      <h3 className=\"is-size-6 has-text-centered\">Round {currentTriviaIndex + 1}/ {triviaList.length}</h3>\n      <h1 className=\"is-size-1 has-text-centered mb1\">\n        <Timer>\n          <Timer.Minutes />:\n\t        <Timer.Seconds />\n        </Timer>\n      </h1>\n      \n      <div className=\"trivia-main-section mb2\">\n        <h2 className=\"is-size-3 question wrapword has-text-centered mb2\">{currentTrivia.question}</h2>\n        <div className=\"columns is-multiline is-variable is-7\">\n          {currentTrivia.options.map((item, index) => {\n            return (\n              <div key={index} className=\"column is-half\" onClick={() => setSelectedAnswer({key: currentTriviaIndex, value: item})}>\n                <div className={'answer-item ' + (selectedOptions[currentTriviaIndex] === item ? 'active' : '') }>\n                <span>{item}</span>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n      \n      <div>\n        <div className=\"columns\">\n          <div className=\"column has-text-right\">\n            <button className=\"button is-secondory\" disabled={currentTriviaIndex === 0} onClick={gotoPreviousQuestion}>Previous</button>\n            <button className=\"button is-primary ml1\" disabled={currentTriviaIndex === (triviaList.length - 1)} onClick={gotoNextQuestion}>Next</button>\n            <button className=\"button is-primary ml1\" onClick={() => setTotalScore(selectedOptions, triviaList)}>Submit</button>\n          </div>\n        </div>\n        <h6 className=\"is-size-5 has-text-centered\">Select correct answer. One entry per round</h6>\n      </div>\n    </div>\n  )\n}\n\nfunction Loader() {\n  return (\n    <div className=\"has-text-centered\">Loading...</div>\n  )\n}\n\nfunction QuizResult(props) {\n  return (\n    <div className=\"result\" v-if=\"currentView === 'result'\">\n      <h2 className=\"is-size-3 has-text-centered\">Congratulations! You successfully completed this trivia.</h2>\n      <h1 className=\"is-size-1 has-text-centered\">Total score: {props.totalScore} </h1>\n    </div>\n  )\n}\n\nTriviaComponent.propTypes = {\n  triviaList: PropTypes.array,\n  currentTriviaIndex: PropTypes.number,\n  triviaView: PropTypes.string,\n  selectedOptions: PropTypes.object,\n  totalScore: PropTypes.number,\n\n  getData: PropTypes.func,\n  setSelectedAnswer: PropTypes.func,\n  gotoNextQuestion: PropTypes.func,\n  gotoPreviousQuestion:PropTypes.func,\n  setTotalScore: PropTypes.func\n}\n\nexport default TriviaComponent;","import { createSelector } from 'reselect';\n\nfunction getTriviaOptions(trivaItem) {\n  const triviaOptions = trivaItem && [trivaItem.correct_answer, ...trivaItem.incorrect_answers];\n\n  function shuffle(array = []) {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n\n    return array;\n  }\n  \n  return shuffle(triviaOptions);\n}\n\nconst getTriviaList = state => state.trivia.triviaList;\n\nconst getTriviaListWithOptions = createSelector(\n  getTriviaList,\n  (triviaList) => {\n    const triviaListWithOptions = triviaList.map((triviaItem) => {\n      const options = getTriviaOptions(triviaItem);\n  \n      return {...triviaItem, options}\n    });\n  \n    return triviaListWithOptions;\n  }\n)\n\n\nexport { getTriviaListWithOptions };","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n  getData, \n  setSelectedAnswer,\n  increamentCurrentTrivaIndex,\n  decrementCurrentTriviaIndex,\n  setTotalScore,\n  updateTriviaView\n} from './triviaActions';\n\nimport TriviaComponent from './TriviaComponent';\nimport { getTriviaListWithOptions } from './triviaSelector';\n\nimport { triviaViews } from './triviaConstants';\n\nclass TriviaContainer extends Component {\n  componentDidMount() {\n    this.props.getData();\n  }\n\n  render() {\n    return <TriviaComponent {...this.props} />\n  }\n\n  onAnswerSelect() {\n    console.log('onAnswerSelect: container');\n  }\n}\n\nconst getTotalScore = function(selectedOptions, triviaList) {\n  let totalScore = 0;\n  const QUESTION_WEIGHT = 5;\n\n  for (const key in selectedOptions) {\n    if (Object.prototype.hasOwnProperty.call(selectedOptions, key)) {\n      const selectedOption = selectedOptions[key];\n      if(selectedOption === triviaList[key].correct_answer) {\n        totalScore += QUESTION_WEIGHT;\n      }\n    }\n  }\n\n  return totalScore;\n};\n\nconst mapStateToProps = state => {\n  const { trivia } = state;\n  const {\n    triviaView,\n    currentTriviaIndex,\n    selectedOptions,\n    totalScore\n  } = trivia;\n\n  return {\n    triviaList: getTriviaListWithOptions(state),\n    currentTriviaIndex,\n    triviaView,\n    selectedOptions,\n    totalScore\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  getData: () => dispatch(getData()),\n  setSelectedAnswer: option => {\n    dispatch(setSelectedAnswer(option));\n  },\n  gotoNextQuestion: () => dispatch(increamentCurrentTrivaIndex()),\n  gotoPreviousQuestion: () => dispatch(decrementCurrentTriviaIndex()),\n  setTotalScore: (selectedOptions, triviaList) => {\n    const totalScore = getTotalScore(selectedOptions, triviaList);\n    dispatch(setTotalScore({totalScore}));\n    dispatch(updateTriviaView({triviaView: triviaViews.result}));\n  }\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TriviaContainer);","import { \n  TRIVIA_DATA_REQUESTED, \n  UPDATE_TRIVIA_VIEW,\n  SET_SELECTED_ANSWER,\n  INCREMET_CURRENT_TRIVIA_INDEX,\n  DECREMET_CURRENT_TRIVIA_INDEX,\n  SET_TOTAL_SCORE\n} from './triviaActionTypes';\n\n\nfunction getData() {\n  return {type: TRIVIA_DATA_REQUESTED}\n}\n\nfunction updateTriviaView(payload) {\n  return {type: UPDATE_TRIVIA_VIEW, payload }\n}\n\nfunction setSelectedAnswer(payload = {}) {\n  return {type: SET_SELECTED_ANSWER, payload}\n}\n\nfunction increamentCurrentTrivaIndex() {\n  return {type: INCREMET_CURRENT_TRIVIA_INDEX}\n}\n\nfunction decrementCurrentTriviaIndex() {\n  return {type: DECREMET_CURRENT_TRIVIA_INDEX}\n}\n\nfunction setTotalScore(payload) {\n  return {type: SET_TOTAL_SCORE, payload}\n}\n\nexport { \n  getData,\n  updateTriviaView, \n  setSelectedAnswer,\n  increamentCurrentTrivaIndex,\n  decrementCurrentTriviaIndex,\n  setTotalScore\n}","export const TRIVIA_DATA_REQUESTED = 'TRIVIA_DATA_REQUESTED';\nexport const TRIVIA_DATA_LOADED = 'TRIVIA_DATA_LOADED';\nexport const TRIVIA_API_ERROR = 'TRIVIA_API_ERROR';\n\nexport const UPDATE_TRIVIA_VIEW = 'UPDATE_TRIVIA_VIEW';\n\nexport const SET_SELECTED_ANSWER = 'SET_SELECTED_ANSWER';\n\nexport const INCREMET_CURRENT_TRIVIA_INDEX = 'INCREMET_CURRENT_TRIVIA_INDEX';\nexport const DECREMET_CURRENT_TRIVIA_INDEX = 'DECREMET_CURRENT_TRIVIA_INDEX';\n\nexport const SET_TOTAL_SCORE = 'SET_TOTAL_SCORE';\n\n\n","import React from 'react';\n\nimport './App.scss';\nimport 'bulma';\n\nimport TriviaContainer from './features/trivia/TriviaContainer';\n\nfunction App() {\n  return (\n    <div className=\"App bg-gradient\">\n      <div className=\"container expand-height\">\n        <div className=\"section expand-height\">\n          <div className=\"columns is-centered expand-height\">\n            <div className=\"column is-8 flex-row is-center\">\n              <TriviaContainer />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { triviaViews } from './triviaConstants';\n\nconst TriviaInitialState = {\n  trivia: {\n    triviaList: [],\n    isLoading: true,\n    currentTriviaIndex: 0,\n    currentTrivia: {},\n    selectedOptions: {},\n    totalScore: 0,\n    triviaView: triviaViews.loader,\n    countFrom: new Date(),\n    totalSeconds: 0\n  }\n}\n\nexport default TriviaInitialState;","import triviaInitialState from './triviaInitialState';\n\nimport { \n  TRIVIA_DATA_LOADED, \n  UPDATE_TRIVIA_VIEW,\n  SET_SELECTED_ANSWER,\n  INCREMET_CURRENT_TRIVIA_INDEX,\n  DECREMET_CURRENT_TRIVIA_INDEX,\n  SET_TOTAL_SCORE\n} from './triviaActionTypes';\n\nfunction triviaReducer(state = triviaInitialState, action) {\n  switch (action.type) {\n    case TRIVIA_DATA_LOADED:\n      return Object.assign({}, state, {\n        trivia: {\n          ...state.trivia,\n          triviaList: state.trivia.triviaList.concat(action.payload.results)\n        }\n      });\n\n    case UPDATE_TRIVIA_VIEW:\n      return Object.assign({}, state, {\n        trivia: {\n          ...state.trivia,\n          triviaView: action.payload.triviaView\n        }\n      });\n\n    case SET_SELECTED_ANSWER:\n      return Object.assign({}, state, {\n        trivia: {\n          ...state.trivia,\n          selectedOptions: Object.assign({}, state.trivia.selectedOptions, {\n            [action.payload.key]: action.payload.value\n          })\n        }\n      });\n\n    case INCREMET_CURRENT_TRIVIA_INDEX:\n      return Object.assign({}, state, {\n        trivia: {\n          ...state.trivia,\n          currentTriviaIndex: state.trivia.currentTriviaIndex + 1\n        }\n      });\n\n    case DECREMET_CURRENT_TRIVIA_INDEX:\n      return Object.assign({}, state, {\n        trivia: {\n          ...state.trivia,\n          currentTriviaIndex: state.trivia.currentTriviaIndex - 1\n        }\n      });\n\n    case SET_TOTAL_SCORE:\n      return Object.assign({}, state, {\n        trivia: {\n          ...state.trivia,\n          totalScore: action.payload.totalScore\n        }\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default triviaReducer;\n\n","import { takeEvery, call, put, all } from 'redux-saga/effects';\n\nimport { \n  TRIVIA_DATA_REQUESTED, \n  TRIVIA_DATA_LOADED,\n  TRIVIA_API_ERROR,\n  UPDATE_TRIVIA_VIEW\n} from './triviaActionTypes';\n\nimport { triviaViews } from './triviaConstants';\n\nexport default function* watcherSaga() {\n  yield takeEvery(TRIVIA_DATA_REQUESTED, workerSaga);\n}\n\nfunction* workerSaga() {\n  try {\n    const updateViewPayload = {\n      triviaView: triviaViews.quiz\n    }\n\n    const payload = yield call(getTriviaData);\n    \n    yield all([\n      put({type: TRIVIA_DATA_LOADED, payload }),\n      put({type: UPDATE_TRIVIA_VIEW, payload: updateViewPayload  })\n    ]);\n    \n  } catch(error) {\n    yield put({type: TRIVIA_API_ERROR, payload: error})\n  }\n  \n}\n\nfunction getTriviaData() {\n  const url = 'https://opentdb.com/api.php?amount=20&category=9&difficulty=easy&type=multiple';\n\n  return fetch(url)\n    .then(response => response.json())\n}","import { createStore, applyMiddleware, compose } from 'redux';\nimport  createSagaMiddleware from \"redux-saga\";\n\nimport triviaReducer from './features/trivia/triviaReducer';\nimport triviaSaga from './features/trivia/triviaSaga';\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  triviaReducer,\n  storeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(triviaSaga);\n\nexport default store;\n\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>, \n    document.getElementById('root')\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}